daemon off;

error_log /dev/stdout info;

events {
    worker_connections 1024;
}

rtmp {
    server {
        listen ${RTMP_PORT};
        chunk_size 4000;

        application stream {
            live on;
            on_publish http://localhost:8080/auth;
            notify_update_timeout 10s;
            on_update http://localhost:8080/auth;
            

            exec ffmpeg -i rtmp://localhost:1935/stream/$name
              -c:a libfdk_aac -b:a 128k -c:v libx264 -b:v 2500k -f flv -g 30 -r 30 -s 1280x720 -preset superfast -profile:v baseline rtmp://localhost:1935/hls/$name_720p2628kbs;
        }

        application hls {
            live on;
            hls on;
            hls_fragment_naming system;
            hls_fragment 5;
            hls_playlist_length 10;
            hls_path /opt/data/hls;
            hls_nested on;

            hls_variant _720p2628kbs BANDWIDTH=2628000,RESOLUTION=1280x720;
        }
    }
}

http {
    resolver 127.0.0.11;
    resolver_timeout 1s;
    access_log /dev/stdout combined;

    server {
        listen ${HTTP_PORT};

        location /hls {
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            root /opt/data;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin *;
        }

        location /live {
          alias /opt/data/hls;
          types {
              application/vnd.apple.mpegurl m3u8;
              video/mp2t ts;
          }
          add_header Cache-Control no-cache;
          add_header Access-Control-Allow-Origin *;
        }


        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet static/stat.xsl;
        }

        location /static {
            alias /www/static;
        }

        
        location = /crossdomain.xml {
            root /www/static;
            default_type text/xml;
            expires 24h;
        }

        location /auth {
            content_by_lua_block {
                ngx.req.read_body()
                
                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeouts(1000, 1000, 1000)
                local ok, err = red:connect("redis", 6379)
                if not ok then
                    ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                    ngx.say("failed to connect: ", err)
                    return ngx.exit(ngx.status)
                end
                local args, err = ngx.req.get_post_args()
                if not args then
                    ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
                    ngx.say("failed to get post args: ", err)
                    return ngx.exit(ngx.status)
                end
                local res, err = red:get(args["name"])
                if not res or res == ngx.null then
                    ngx.status = ngx.HTTP_FORBIDDEN
                    ngx.say("app isn't authorized.")
                    return ngx.exit(ngx.status)
                end
                ngx.status = ngx.HTTP_OK
                ngx.exit(ngx.status)
            }
        }

    }
}
